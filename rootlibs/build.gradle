apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    task makeJar(type: Copy) {
//删除存在的
        delete 'build/libs/rootlibs.jar'
//设置拷贝的文件
        from('build/intermediates/aar_main_jar/release/')
//打进jar包后的文件目录
        into('build/libs/')
//将classes.jar放入build/libs/目录下
//include ,exclude参数来设置过滤
//（我们只关心classes.jar这个文件）
        include('classes.jar')
//重命名
        rename ('classes.jar', 'myjar.jar')
    }
    makeJar.dependsOn(build)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'



    implementation 'com.liulishuo.filedownloader:library:1.7.7'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation "com.squareup.okhttp3:okhttp:4.8.1"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
//    implementation 'com.github.bumptech.glide:glide:4.9.0'
//    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'



    implementation 'com.kbeanie:multipicker:1.6@aar'


//    GSON
    implementation 'com.google.code.gson:gson:2.8.6'
//    ################################################
// 解决 AppCompatActivity---Cannot access android.arch.lifecycle.ViewModelStoreOwner
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
//解决lib错误

    api 'com.theartofdev.edmodo:android-image-cropper:2.8.+'

    implementation 'top.zibin:Luban:1.1.8'

//##################################retrofit###########################
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'//Retrofit依赖
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'//可选依赖，解析json字符所用
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
//            <uses-permission android:name="android.permission.INTERNET" />
//    Jackson：
    implementation 'com.squareup.retrofit2:converter-jackson:2.0.2'

//##############################################################################
//    https://github.com/Bigkoo/Android-PickerView
    implementation 'com.contrarywind:Android-PickerView:4.1.9'
//    6.若只需要WheelView基础控件自行扩展实现逻辑，可直接添加基础控件库，Gradle 依赖：
//    implementation 'com.contrarywind:wheelview:4.1.0'

//###############################################################################、#
    //android 数据库创建
    def room_version = "2.2.4"
    //room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    kapt 'androidx.room:room-compiler:2.2.4'
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

}


//def _BASENAME = "rootlibs";
//def _VERSION = "_V1.0";
//def _DestinationPath = "build"; //生成jar包的位置
//def zipFile = file('build/intermediates/bundles/default/classes.jar'); //待打包文件位置
//
//task deleteBuild(type:Delete){
//    delete _DestinationPath + _BASENAME + _VERSION + ".jar"
//}
//
//task makeJar(type:Jar){
//    from zipTree(zipFile)
//    from fileTree(dir:'src/main',includes:['assets/**']) //将assets目录打入jar包
//    baseName = _BASENAME + _VERSION
//    destinationDir = file(_DestinationPath)
//}
//
//makeJar.dependsOn(deleteBuild, build)